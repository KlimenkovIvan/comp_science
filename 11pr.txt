#практическая работа №11
import numpy as np 
 
#значения S и G 
S = 12
G = 6
S = S/10 
G = G/10 
 
#коэффициенты полинома 
a0= -S * (G**2 + S**2) 
a1= (G + S)**2 
a2= -(2*G - S) 
a3= 1  #по усл
 
#функция f(x), которую мы интегрируем 
def f(x): 
    return a0 + a1 * x + a2 * x**2 + a3 * x**3 
 
#метод прямоугольников 
def rectangle_method(a, b, n): 
    h = (b - a) / n 
    result = sum(f(a + i * h) for i in range(n)) * h 
    return result 
 
#метод трапеций 
def trapezoid_method(a, b, n): 
    h = (b - a) / n 
    result = (f(a) + f(b)) / 2 
    for i in range(1, n): 
        result += f(a + i * h) 
    result *= h 
    return result 
 
#метод Симпсона 
def simpson_method(a, b, n): 
    h = (b - a) / n 
    result = (f(a) + f(b)) + 4 * sum(f(a + (2 * i - 1) * h) for i in range(1, n // 2 + 1)) + 2 * sum(f(a + 2 * i * h) for i in range(1, n // 2)) 
    result *= h / 3 
    return result 
 
#интервал интегрирования и количество разбиений 
a = 0 
b = 3 
n = 1000   
 
#приближенное значение интеграла каждым методом 
S_r = rectangle_method(a, b, n) 
S_t = trapezoid_method(a, b, n) 
S_s = simpson_method(a, b, n) 
 
print(f"метод прямоугольников: {S_r}") 
print(f"метод трапеций: {S_t}") 
print(f"метод Симпсона: {S_s}")





